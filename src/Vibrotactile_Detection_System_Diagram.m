function Vibrotactile_Detection_System_Diagram(behavior)

%
% Vibrotactile_Detection_System_Diagram.m
% 
%   copyright 2024, Vulintus, Inc.
%
%   VIBROTACTILE_DETECTION_SYSTEM_DIAGRAM creates and then updates a system
%   diagram on the system axes of the Vulintus Common Behaivor GUI showing
%   the recent force sensor history and pellet receiver, cue light, and 
%   house light status for the SensiTrak vibrotactile detection task.
%   
%   UPDATE LOG:
%   2024-11-11 - Drew Sloan - Function first created, adapted from
%                             "Fixed_Reinforcement_System_Diagram.m".
%


% colors = struct(    'idle',     [0.7 0.7 0.7],...
%                     'blocked',  [1 0.7 0.7],...
%                     'licked',   [0 0 1]);                                   %Define the colors to be used in the displays.

if ~behavior.status.update_plots                                            %If there's no updates for the plot.
    return                                                                  %Skip the rest of the function.
end

%Create the plot objects if they don't already exist.
if is_empty_field(behavior.ui,'display','initialized')                      %If the display structure isn't yet initialized.
    behavior.ui.display = struct(   'force',    NaN,...
                                    'nosepoke', NaN,...
                                    'cue_led',  NaN,...
                                    'lick',     NaN,...
                                    'initialized', true);                   %Reset the display field.
    cla(behavior.ui.ax.system);                                             %Clear the system diagram axes.
    hold(behavior.ui.ax.system,'on');                                       %Hold the axes for multiple plot calls.
    set(behavior.ui.ax.system,  'xtick',        [],...
                                'ytickmode',    'auto',...
                                'yticklabels',  [],...
                                'xlim',         [1,500]);                   %Reset the axis ticks and limits.
    behavior.ui.ax.system.Units = 'centimeters';                            %Set the axes position units to centimeters.    
    behavior.ui.display.force = ...
        area(1:behavior.status.force_buffer.size(2),...
        behavior.status.force_buffer.values(2,:),...
        'linewidth',2,...
        'facecolor',[0.5 0.5 1],...
        'parent',behavior.ui.ax.system);                                    %Plot some dummy data to be overwritten as an areaseries plot.
    behavior.ui.display.filter = ...
        plot(1:behavior.status.force_buffer.size(2),...
        behavior.status.force_buffer.values(3,:),...
        'linewidth',2,...
        'color',[0.5 0 0],...
        'parent',behavior.ui.ax.system);                                    %Plot some dummy data to be overwritten as a line plot.
    line([1,behavior.status.force_buffer.size(2)],10*[1,1],...
        'color','k',...
        'linestyle',':',...
        'visible','on',...
        'parent',behavior.ui.ax.system);                                    %Plot a dotted line to show the threshold.


    % txt_fontsize = 2.0*behavior.ui.ax.system.Position(4);                   %Grab the height of the axes, in centimeters.
    % str = {'LEFT','CENTER','RIGHT'};                                        %Create labels for the IR sensors.
    % xy = [sind(0:3:360)', cosd(0:3:360)'];                                  %Create basic circle coordinates.
    % for i = 1:3                                                             %Step through the three nosepokes.
    %     behavior.ui.display.nosepoke(i) = fill(i+0.4*xy(:,1),...
    %         1+0.4*xy(:,2),colors.idle,...
    %         'parent',behavior.ui.ax.system,...
    %         'UserData',0);                                                  %Create a circle to show each IR sensor.
    %     behavior.ui.display.cue_led(i) = fill(i+0.2*xy(:,1),...
    %         2+ 0.2*xy(:,2),colors.idle,...
    %         'parent',behavior.ui.ax.system,...
    %         'UserData',colors.idle);                                        %Create a circle to show each LED cue light.
    %     text(i,0.25,str{i},...
    %         'verticalalignment','middle',...
    %         'horizontalalignment','center',...
    %         'fontsize',txt_fontsize,...
    %         'parent',behavior.ui.ax.system);                                %Make a text label for each IR sensor.
    % end
    % xy = [sind(45:3:315)', cosd(45:3:315)'];                                %Create basic circle coordinates.
    % xy(end+1,:) = [0, sqrt(2)];                                             %Create the top of a drop.
    % behavior.ui.display.lick = fill(2+0.1*xy(:,1),...
    %     1+0.1*xy(:,2),colors.idle,...
    %     'parent',behavior.ui.ax.system,...
    %     'UserData',0);                                                      %Create a droplet to show the lick sensor
end

%Update the force plot.
behavior.ui.display.force.YData = behavior.status.force_buffer.values(2,:); %Update the raw force signal.
behavior.ui.display.filter.YData = ...
    behavior.status.force_buffer.values(3,:);                               %Update the filtered force signal.
y_minmax = [-1, 15];                                                        %Set a minimum and maximum Y-value.
y_minmax(1) = min(y_minmax(1),...
    1.05*min(behavior.status.force_buffer.values(2,:)));                    %Check for a lower minimum.
y_minmax(2) = max(y_minmax(2),...
    1.05*max(behavior.status.force_buffer.values(2,:)));                    %Check for a higher maximum.
behavior.ui.ax.system.YLim = y_minmax;                                      %Reset the axis y-limit.

if isfield(behavior.status,'nosepoke')                                      %If there is a status field for the nosepokes.
    % display_status = get(behavior.ui.display.nosepoke(i),'UserData');    %Grab the blocked/unblocked indicator from the object UserData.
    % if isempty(display_status) || ...
    %         display_status ~= behavior.status.nosepoke(i)               %If the status isn't set or has changed...
    %     if behavior.status.nosepoke(i) == 1                             %If the nosepoke is blocked.
    %         set(behavior.ui.display.nosepoke(i),...
    %             'FaceColor',colors.blocked);                            %Change the indicator FaceColor to red.
    %     else                                                            %Otherwise, if the nosepoke isn't blocked...
    %         set(behavior.ui.display.nosepoke(i),...
    %             'FaceColor',colors.idle);                               %Change the indicator FaceColor to gray.
    %     end
    %     set(behavior.ui.display.nosepoke(i),...
    %         'UserData',behavior.status.nosepoke(i));                    %Save the blocked/unblocked indicator back to the object UserData.
    % end
end

if isfield(behavior.status,'cue_led')                                       %If there is a status field for the nosepokes.
    % led_color = get(behavior.ui.display.cue_led(i),'UserData');         %Grab the current color from the object UserData.
    % if isempty(led_color) || ...
    %         ~isequal(led_color,behavior.status.cue_led(i,:))            %If the status isn't set or has changed...
    %     set(behavior.ui.display.cue_led(i),...
    %         'FaceColor',behavior.status.cue_led(i,:));                  %Change the indicator FaceColor to red.
    %     set(behavior.ui.display.cue_led(i),...
    %         'UserData',behavior.status.cue_led(i,:));                   %Save the blocked/unblocked indicator back to the object UserData.
    % end
end

if isfield(behavior.status,'lick')                                          %If there is a status field for the lick sensor.
    % display_status = behavior.ui.display.lick.UserData(1);                  %Grab the licked/unlicked indicator from the object UserData.
    % if isempty(display_status) || ...
    %         display_status ~= behavior.status.lick(1)                       %If the status isn't set or has changed...
    %     if behavior.status.lick(1) == 1                                     %If the lick sensor is licked.
    %         set(behavior.ui.display.lick,'FaceColor',...
    %             colors.licked);                                             %Change the indicator FaceColor to red.
    %     else                                                                %Otherwise, if the nosepoke isn't blocked...
    %         set(behavior.ui.display.lick,'FaceColor',...
    %             colors.idle);                                               %Change the indicator FaceColor to gray.
    %     end
    %     behavior.ui.display.lick.UserData = ...
    %         behavior.status.lick(1);                                        %Save the blocked/unblocked indicator back to the object UserData.
    % end
end

behavior.status.new_data = false;                                           %Set the new data flag to false to show the data has been plotted.