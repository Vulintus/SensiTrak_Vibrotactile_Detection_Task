function ctrl = Vulintus_OTSC_Linear_Motion_Functions(ctrl, otsc_codes, varargin)

%Vulintus_OTSC_Linear_Motion_Functions.m - Vulintus, Inc., 2023
%
%   VULINTUS_OTSC_LINEAR_MOTION_FUNCTIONS defines and adds OmniTrak Serial
%   Communication (OTSC) functions to the control structure for Vulintus
%   OmniTrak devices which have linear motion capabilities, i.e. stepper 
%   motors and actuators.
% 
%   NOTE: These functions are designed to be used with the "serialport" 
%   object introduced in MATLAB R2019b and will not work with the older 
%   "serial" object communication.
%
%   UPDATE LOG:
%   2024-02-02 - Drew Sloan - Function first created.
%   2024-02-22 - Drew Sloan - Organized functions by scope into subfields.
%   2024-06-04 - Drew Sloan - Renamed script from
%                             "Vulintus_OTSC_Movement_Functions.m" to
%                             "Vulintus_OTSC_Linear_Motion_Functions.m".
%   2024-06-07 - Drew Sloan - Added a optional "devices" input argument to
%                             selectively add the functions to the control 
%                             structure.
%


%List the Vulintus devices that use these functions.
device_list = {'MT-PP','OT-PD','PB-LA','ST-AP'};

%If an cell arracy of connected devices was provided, match against the device lis.
if nargin > 2
    connected_devices = varargin{1};                                        %Grab the list of connected devices.
    [~,i,~] = intersect(connected_devices,device_list);                     %Look for any matches between the two device lists.
    if ~any(i)                                                              %If no match was found...
        if isfield(ctrl,'move')                                             %If there's a "move" field in the control structure...
            ctrl = rmfield(ctrl,'move');                                    %Remove it.
        end
        return                                                              %Skip execution of the rest of the function.
    end
end

serialcon = ctrl.serialcon;                                                 %Grab the handle for the serial connection.get_

%Module linear motion functions.
ctrl.move = [];                                                             %Create a field to hold linear motion functions.

%Initiate the homing routine on the module. 
ctrl.move.rehome = @(varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.MODULE_REHOME,...
    varargin{:});                                  

%Retract the module movement to its starting or base position. 
ctrl.move.retract = @(varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.MODULE_RETRACT,...
    varargin{:});                                 

%Request the current position of the module movement, in millimeters.
ctrl.move.cur_position = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_CUR_POS_MM,...
    'reply',{1,'single'},...
    varargin{:});                                                           

%Request/set the current target position of a module movement, in millimeters.
ctrl.move.target.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_TARGET_POS_MM,...
    'reply',{1,'single'},...
    varargin{:});                                                           
ctrl.move.target.set = ...
    @(target_in_mm,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.TARGET_POS_MM,...
    'data',{target_in_mm,'single'},...
    varargin{:});

%Request/set the current minimum position of a module movement, in millimeters.
ctrl.move.min_position.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_MIN_POS_MM,...
    'reply',{1,'single'},...
    varargin{:});                                                           
ctrl.move.min_position.set = ...
    @(pos_in_mm,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.MIN_POS_MM,...
    'data',{pos_in_mm,'single'},...
    varargin{:});

%Request/set the current maximum position of a module movement, in millimeters.
ctrl.move.max_position.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_MAX_POS_MM,...
    'reply',{1,'single'},...
    varargin{:});      
ctrl.move.max_position.set = ...
    @(pos_in_mm,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.MAX_POS_MM,...
    'data',{pos_in_mm,'single'},...
    varargin{:});

%Request/set the current minimum speed, in millimeters/second.
ctrl.move.min_speed.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_MIN_SPEED_MM_S,...
    'reply',{1,'single'},...
    varargin{:});                                                           
ctrl.move.min_speed.set = ...
    @(speed_in_mmps,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.MIN_SPEED_MM_S,...
    'data',{speed_in_mmps,'single'},...
    varargin{:});

%Request/set the current maximum speed, in millimeters/second.
ctrl.move.max_speed.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_MAX_SPEED_MM_S,...
    'reply',{1,'single'},...
    varargin{:});   
ctrl.move.max_speed.set = ...
    @(speed_in_mmps,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.MAX_SPEED_MM_S,...
    'data',{speed_in_mmps,'single'},...
    varargin{:});

%Request/set the current movement acceleration, in millimeters/second^2.
ctrl.move.acceleration.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_ACCEL_MM_S2,...
    'reply',{1,'single'},...
    varargin{:});
ctrl.move.acceleration.set = ...
    @(accel_in_mmps2,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.ACCEL_MM_S2,...
    'data',{accel_in_mmps2,'single'},...
    varargin{:});
