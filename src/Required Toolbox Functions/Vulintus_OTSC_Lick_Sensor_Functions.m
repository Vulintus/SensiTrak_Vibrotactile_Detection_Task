function ctrl = Vulintus_OTSC_Lick_Sensor_Functions(ctrl, otsc_codes, varargin)

%Vulintus_OTSC_Lick_Sensor_Functions.m - Vulintus, Inc., 2023
%
%   VULINTUS_OTSC_LICK_SENSOR_FUNCTIONS defines and adds OmniTrak Serial
%   Communication (OTSC) functions to the control structure for Vulintus
%   OmniTrak devices which have lick detection sensors.
% 
%   NOTE: These functions are designed to be used with the "serialport" 
%   object introduced in MATLAB R2019b and will not work with the older 
%   "serial" object communication.
%
%   UPDATE LOG:
%   2024-05-09 - Drew Sloan - Function first created, adapted from
%                             "Vulintus_OTSC_Nosepoke_Functions.m".
%   2024-06-07 - Drew Sloan - Added a optional "devices" input argument to
%                             selectively add the functions to the control 
%                             structure.
%


%List the Vulintus devices that use these functions.
device_list = {'OT-3P'};


%If an cell arracy of connected devices was provided, match against the device lis.
if nargin > 2
    connected_devices = varargin{1};                                        %Grab the list of connected devices.
    [~,i,~] = intersect(connected_devices,device_list);                     %Look for any matches between the two device lists.
    if ~any(i)                                                              %If no match was found...
        if isfield(ctrl,'lick')                                             %If there's a "lick" field in the control structure...
            ctrl = rmfield(ctrl,'lick');                                    %Remove it.
        end
        return                                                              %Skip execution of the rest of the function.
    end
end

serialcon = ctrl.serialcon;                                                 %Grab the handle for the serial connection.

%Lick sensor status functions.
ctrl.lick = [];                                                             %Create a field to hold lick sensor functions.

%Request the current lick sensor status bitmask.
ctrl.lick.bits = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_LICK_BITMASK,...
    'reply',{1, 'uint32'; 1,'uint8'},...
    varargin{:});     

%Request the current lick sensor capacitance reading.
ctrl.lick.cap = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_LICK_CAP,...
    'reply',{1,'uint32'; 1,'uint16'},...
    varargin{:});        

%Request the minimum and maximum capacitance values of the lick sensor capacitance history.
ctrl.lick.minmax = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_LICK_MINMAX,...
    'reply',{2,'uint16'},...
    varargin{:});                 

%Request/set the current lick sensor threshold setting, normalized from 0 to 1.
ctrl.lick.thresh_fl.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_LICK_THRESH_FL,...
    'reply',{1,'single'},...
    varargin{:});     
ctrl.lick.thresh_fl.set = ...
    @(thresh,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.LICK_THRESH_FL, ...
    'data',{thresh,'single'},...
    varargin{:});

%Request/set the current lick sensor auto-threshold setting.
ctrl.lick.thresh_cap.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_LICK_THRESH_CAP,...
    'reply',{1,'uint16'},...
    varargin{:});    
ctrl.lick.thresh_cap.set = ...
    @(thresh,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.LICK_THRESH_CAP,...
    'data',{thresh,'uint16'},...
    varargin{:});

%Request/set the current lick sensor auto-thresholding setting (0 = fixed, 1 = autoset).
ctrl.lick.auto_thresh.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_LICK_THRESH_AUTO,...
    'reply',{1,'uint8'},...
    varargin{:});      
ctrl.lick.auto_thresh.set = ...
    @(i,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.LICK_THRESH_AUTO,...
    'data',{i,'uint8'},...
    varargin{:});

%Request/set the current lick sensor reset timeout duration, in milliseconds (0 = no time-out reset).
ctrl.lick.reset_timeout.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.OTSC_REQ_LICK_RESET_TIMEOUT,...
    'reply',{1,'uint16'},...
    varargin{:});    
ctrl.lick.reset_timeout.set = ...
    @(thresh,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.OTSC_LICK_RESET_TIMEOUT,...
    'data',{thresh,'uint16'},...
    varargin{:});

 
