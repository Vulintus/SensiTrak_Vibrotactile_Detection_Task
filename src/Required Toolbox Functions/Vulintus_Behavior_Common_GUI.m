function handles = Vulintus_Behavior_Common_GUI(varargin)

%
%Vulintus_Behavior_Common_GUI.m - Vulintus, Inc.
%
%   VULINTUS_BEHAVIOR_COMMON_GUI creates a common graphical user interface
%   (GUI) used by most Vulintus behavioral task programs.
%   
%   UPDATE LOG:
%   2024-02-28 - Drew Sloan - Function first created, adapted from
%                             Stop_Task_Make_GUI.m
%


%% Load any passed task information.
options = struct;                                                           %Create an empty options structure.
if nargin >= 1                                                              %If at least one input argument was passed...
    handles = varargin{1};                                                  %The pre-existing handles structure will be the first argument..
else                                                                        %Otherwise (mostly for debugging)...
    handles = struct;                                                       %Create an empty handles structure.
    close all force;                                                        %Close any open figures.
    fclose all;                                                             %Close any open data files.
end
if nargin >= 2                                                              %If at least two input arguments were passed...
    options = varargin{2};                                                  %An options structure will be the second argument.
end
if isfield(handles,'task')                                                  %If there   's a task name field in the handles structure...
    if isfield(handles,'system_name')                                       %If there's a system name in the handles structure...
        fig_name = sprintf('%s: %s',handles.system_name,handles.task);      %Create a figure title.
    else                                                                    %Otherwise, if there's no system name...
        fig_name = handles.task;                                            %Use the task name.
    end
else                                                                        %Otherwise...
    fig_name = 'Vulintus Behavior';                                         %Use a generic figure title for the time being.
end
if isfield(handles,'ctrl') && isfield(handles.ctrl,'port')                  %If there's a control field and a device subfield...
    fig_name = sprintf('%s (%s',fig_name,handles.ctrl.port);                %Add the COM port to the figure name.
    if isfield(handles.ctrl,'device') && ...
            isfield(handles.ctrl.device,'userset_alias') && ...
            ~isempty(handles.ctrl.device.userset_alias)                     %If there's an user-set alias for the device...
        fig_name = sprintf('%s, %s)',fig_name,...
            handles.ctrl.device.userset_alias);                             %Add the alias to the figure name.
    else                                                                    %Otherwise...
        fig_name = sprintf('%s)',fig_name);                                 %Close the parentheses on the figure name.
    end
end


%% Set the common properties of subsequent uicontrols.
fontsize = 16;                                                              %Set the fontsize for all uicontrols.
ui_h = 0.75;                                                                %Set the height of all editboxes and listboxes, in centimeters.
sp = 0.1;                                                                   %Set the spacing between uicontrols, in centimeters.
label_color = [0.7 0.7 0.9];                                                %Set the color for all labels.


%% Create the main figure.
set(0,'units','centimeters');                                               %Set the system units to centimeters.
pos = get(0,'ScreenSize');                                                  %Grab the system screen size.
w = 20;                                                                     %Set the initial GUI width, in centimeters.
h = 14;                                                                     %Set the initial GUI height, in centimeters.
fig = uifigure('units','centimeter',...
    'Position',[pos(3)/2-w/2, pos(4)/2-h/2, w, h],...
    'resize','off',...
    'name',fig_name);                                                       %Create the main figure.
if isfield(handles,'system_name')                                           %If there's a system name in the handles structure...
    switch lower(handles.system_name)                                       %Switch between the recognized system names.
        case 'habitrak'                                                     %HabiTrak.
            [img, alpha_map] = Vulintus_Load_HabiTrak_V1_Icon_48px;         %Use the HabiTrak icon.
        case 'mototrak'                                                     %MotoTrak.
            [img, alpha_map] = Vulintus_Load_MotoTrak_V2_Icon_48px;         %Use the MotoTrak V2 icon.
        case 'omnihome'                                                     %OmniHome.
            [img, alpha_map] = Vulintus_Load_OmniHome_V1_Icon_48px;         %Use the OmniHome icon.
        case 'omnitrak'                                                     %OmniTrak.
            [img, alpha_map] = Vulintus_Load_OmniTrak_V1_Icon_48px;         %Use the OmniTrak icon.    
        case 'sensitrak'                                                    %SensiTrak.
            [img, alpha_map] = Vulintus_Load_SensiTrak_V1_Icon_48px;        %Use the SensiTrak icon.
        otherwise                                                           %For all other options.
            [img, alpha_map] = ...
                Vulintus_Load_Vulintus_Logo_Circle_Social_48px;             %Use the Vulintus Social Logo.
    end
else                                                                        %Otherwise...
    [img, alpha_map] = Vulintus_Load_Vulintus_Logo_Circle_Social_48px;      %Use the Vulintus Social Logo icon.
end
img = Vulintus_Behavior_Match_Icon(img, alpha_map, fig);                    %Match the icon board to the figure.
fig.Icon = img;                                                             %Set the figure icon.
fig.Units = 'pixels';                                                       %Change the figure units to pixels.
pos = fig.Position;                                                         %Grab the figure position, in pixes.
scale = pos(3)/w;                                                           %Calculate the centimeters to pixels conversion factor.


%% Reset any handles already existing in the structure.
handles.ui = struct('menu',[],'label',[]);                                  %Reset the "ui" structure


%% Create a system menu at the top of the figure.
handles.ui.menu.system.h = uimenu(fig,'label','System');                    %Create a system menu at the top of the figure.
str = 'COM Port:';                                                          %Create a submenu option string.
if isfield(handles,'ctrl') && isfield(handles.ctrl,'port')                  %If there's a control field and a device subfield...
    str = sprintf('%s %s',str,handles.ctrl.port);                           %Add the port to the string.
end
handles.ui.menu.system.com_port = uimenu(handles.ui.menu.system.h,...
    'label',str,...
    'enable','on',...
    'separator','off');                                                     %Create a submenu option to show the COM port.
str = 'Controller:';                                                        %Create a submenu option string.
if isfield(handles,'ctrl') && isfield(handles.ctrl,'device') && ...
        isfield(handles.ctrl.device,'name')                                 %If there's a device name in the handles structure...
    str = sprintf('%s %s',str,handles.ctrl.device.name);                    %Add the device name to the string.
end
handles.ui.menu.system.controller = uimenu(handles.ui.menu.system.h,...
    'label',str,...
    'enable','on',...
    'separator','off');                                                     %Create a submenu option to show the controller type.
str = 'Vulintus SN:';                                                       %Create a submenu option string.
if isfield(handles,'ctrl') && isfield(handles.ctrl,'device') && ...
        isfield(handles.ctrl.device,'vulintus_alias')                       %If there's a Vulintus alias in the handles structure...
    str = sprintf('%s %s',str,handles.ctrl.device.vulintus_alias);          %Add the Vulintus alias to the string.
end
handles.ui.menu.system.vulintus_alias = uimenu(handles.ui.menu.system.h,...
    'label',str,...
    'enable','on',...
    'separator','off');                                                     %Create a submenu option to show the Vulintus alias.


%% Create a stages menu at the top of the figure.
handles.ui.menu.stages.h = uimenu(fig,'label','Stages');                    %Create a stages menu at the top of the LED_Detection_Task figure.
handles.ui.menu.stages.view_spreadsheet = ...
    uimenu(handles.ui.menu.stages.h,...
    'label','View Spreadsheet in Browser...',...
    'enable','off',...
    'separator','on');                                                      %Create a submenu option for opening the stages spreadsheet.
handles.ui.menu.stages.set_spreadsheet = ...
    uimenu(handles.ui.menu.stages.h,...
    'label','Set Spreadsheet URL...',...
    'enable','off');                                                        %Create a submenu option for setting the stages spreadsheet URL.
handles.ui.menu.stages.reload_spreadsheet = ...
    uimenu(handles.ui.menu.stages.h,...
    'label','Reload Spreadsheet',...
    'enable','off');                                                        %Create a submenu option for reloading the stages spreadsheet.


%% Create a preferences menu at the top of the figure.
handles.ui.menu.pref.h = uimenu(fig,'label','Preferences');                 %Create a preferences menu at the top of the LED_Detection_Task figure.
handles.ui.menu.pref.open_datapath = uimenu(handles.ui.menu.pref.h,...
    'label','Open Data Directory',...
    'enable','off');                                                        %Create a submenu option for opening the target data directory.
handles.ui.menu.pref.set_datapath = uimenu(handles.ui.menu.pref.h,...
    'label','Set Data Directory',...
    'enable','off');                                                        %Create a submenu option for setting the target data directory.
handles.ui.menu.pref.err_report = uimenu(handles.ui.menu.pref.h,...
    'label','Automatic Error Reporting',...
    'enable','off',...
    'separator','on');                                                      %Create a submenu option for tuning Automatic Error Reporting on/off.
handles.ui.menu.pref.err_report_on = ...
    uimenu(handles.ui.menu.pref.err_report,...
    'label','On',...
    'enable','off',...
    'checked','on');                                                        %Create a sub-submenu option for tuning Automatic Error Reporting on.
handles.ui.menu.pref.err_report_off = ...
    uimenu(handles.ui.menu.pref.err_report,...
    'label','Off',...
    'enable','off',...
    'checked','off');                                                       %Create a sub-submenu option for tuning Automatic Error Reporting on.
handles.ui.menu.pref.error_reports = uimenu(handles.ui.menu.pref.h,...
    'label','View Error Reports',...
    'enable','off');                                                        %Create a submenu option for opening the error reports directory.
handles.ui.menu.pref.config_dir = uimenu(handles.ui.menu.pref.h,...
    'label','Configuration Files...',...
    'enable','off',...
    'separator','on');                                                      %Create a submenu option for opening the configuration files directory.
        

%% Create a panel housing all of the session information uicontrols.
ph = 2*(ui_h + sp) + 2*sp;                                                  %Set the panel height.
pw = w - 3*sp;                                                              %Set the panel width.
py = h - ph - sp;                                                           %Set the panel bottom edge.
p = uipanel(fig,'units','pixels',...
    'position',scale*[2*sp, py, pw, ph],...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'backgroundcolor',get(fig,'color'));                                    %Create the panel to hold the session information uicontrols.

pos = [sp, 2*sp, 2.35, ui_h];                                               %Set the label position.
handles.ui.label.system = uilabel(p,'text','SYSTEM: ',...
    'position',scale*pos);                                                  %Make a static text label for the booth.
pos(1) = pos(1) + pos(3) + sp;                                              %Set the left-hand edge for the booth drop-down.
pos(3) = 5.5;                                                               %Set the width of the booth drop-down.
if isfield(handles.ctrl,'device') &&...   
        isfield(handles.ctrl.device,'userset_alias') && ...
        ~isempty(handles.ctrl.device.userset_alias)                         %If there's an user-set alias for the device...
    str = handles.ctrl.device.userset_alias;                                %Grab the alias to show in the system editbox.
elseif isfield(handles.ctrl,'port') && ~isempty(handles.ctrl.port)          %Otherwise, if there's a COM port for this device...
    str = handles.ctrl.port;                                                %Grab the COM port to show in the system editbox.
else                                                                        %Otherwise...
    str = '-';                                                              %Just show a dash.
end
handles.ui.edit_port = uieditfield(p,'editable','off',...
    'value',str,...
    'position',scale*pos,...
    'fontname','Arial',...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','left',...
    'backgroundcolor','w',...
    'enable','off');                                                        %Create an editbox for displaying the COM Port.

pos = [sp, 3*sp + ui_h, 2.35, ui_h];                                        %Set the label position.
handles.ui.label.subject = uilabel(p,'text','SUBJECT: ',...
    'position',scale*pos);                                                  %Make a static text label for the subject.
pos(1) = pos(1) + pos(3) + sp;                                              %Set the left-hand edge for the subject drop-down.
pos(3) = 3.5;                                                               %Set the width of the subject drop-down.
handles.ui.drop_subject = uidropdown(p,'editable','off',...
    'items',{'<Add New Subject>','<Edit Subject List>','[Bench Test]'},...
    'position',scale*pos,...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'backgroundcolor','w',...
    'enable','off');                                                        %Create an drop-down for selecting the subject name.

pos = handles.ui.drop_subject.Position/scale;                               %Grab the position of the subject drop-down.
pos(1) = pos(1) + pos(3) + sp;                                              %Set the left-hand edge for the subject drop-down.
pos(3) = 1.9;                                                               %Set the width of the label.
handles.ui.label.stage = uilabel(p,'text','STAGE: ',...
    'position',scale*pos);                                                  %Make a static text label for the stage
pos(1) = pos(1) + pos(3) + sp;                                              %Set the left edge of the task mode editbox.
pos(3) = pw - sp - pos(1);                                                  %Set the width of the task mode editbox.
handles.ui.drop_stage = uidropdown(p,'editable','off',...
    'items',{'-'},...
    'position',scale*pos,...
    'fontname','Arial',...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'backgroundcolor','w',...
    'enable','off');                                                        %Create an drop-down for selecting the stage.

pos = handles.ui.edit_port.Position/scale;                                  %Grab the position of the system/port editbox.
pos(1) = pos(1) + pos(3) + sp;                                              %Set the left-hand edge for the session duration timer.
pos(3) = 2.25;                                                              %Set the width of the label.
handles.ui.label.session = uilabel(p,'text','SESSION: ',...
    'position',scale*pos);                                                  %Make a static text label for the stage
pos(1) = pos(1) + pos(3) + sp;                                              %Set the left edge of the task mode editbox.
pos(3) = 2.0;                                                               %Set the width of the task mode editbox.
handles.ui.edit_dur = uieditfield(p,'editable','off',...
    'value','0:00:00',...
    'position',scale*pos,...
    'fontname','Arial',...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','center',...
    'backgroundcolor','w',...
    'enable','off');                                                        %Create an editbox for displaying the sampling time.

pos(1) = pos(1) + pos(3) + sp;                                              %Set the left edge of a label.
pos(3) = 3.3;                                                               %Set the width of a label.
handles.ui.label.hits = uilabel(p,'text','HITS / TRIALS: ',...
    'position',scale*pos);                                                  %Make a static text label for each uicontrol.
pos(1) = pos(1) + pos(3) + sp;                                              %Set the left edge of the task mode editbox.
pos(3) = pw - sp - pos(1);                                                  %Set the width of the task mode editbox.
handles.ui.edit_rewards = uieditfield(p,'editable','off',...
    'value','0 / 0',...
    'position',scale*pos,...
    'fontname','Arial',...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','center',...
    'backgroundcolor','w',...
    'enable','off');                                                        %Create an editbox for displaying the sampling time.

labels = [  handles.ui.label.system,...
            handles.ui.label.subject,...
            handles.ui.label.stage,...
            handles.ui.label.session,...
            handles.ui.label.hits];                                         %Grab all of the label handles.
set(labels,'fontname','Arial',...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'horizontalalignment','right',...
    'verticalalignment','center',...
    'backgroundcolor',label_color);                                         %Set the properties for all the labels.

    
%% Create axes for displaying a system diagram.
ax_h = 6;                                                                   %Set the total axes height, in centimeters.
py = py - ax_h - 2*sp;                                                      %Set the axes bottom edge.
pos = [2*sp, py, ax_h, ax_h];                                               %Set the position for the force axes.
handles.ui.ax_system = axes('parent',fig,...
    'units','centimeters',...
    'position',pos,...
    'xtick',[],...
    'ytick',[],...
    'box','on');                                                            %Create axes to show the force signal.
disableDefaultInteractivity(handles.ui.ax_system);                          %Disable the axes interactivity.
handles.ui.ax_system.Toolbar.Visible = 'off';                               %Hide the axes toolbar.


%% Create axes for displaying real-time data.
pos(1) = pos(1) + pos(3) + sp;                                              %Set the left edge of the psychophysical axes.
pos(2) = py;                                                                %Set the bottom edge of the axes.
pos(3) = w - pos(1) - 2*sp;                                                 %Set the width of the axes.
pos(4) = ax_h;                                                              %Set the height of the axes.
handles.ui.ax_data = axes('parent',fig,...
    'units','centimeters',...
    'position',pos,...
    'xtick',[],...
    'ytick',[],...
    'box','on');                                                            %Create axes to show the real-time data.
disableDefaultInteractivity(handles.ui.ax_data);                            %Disable the axes interactivity.
handles.ui.ax_data.Toolbar.Visible = 'off';                                 %Hide the axes toolbar.


%% Create pushbuttons for starting, stopping, pausing, and manually triggering feedings.
ui_w = 4;                                                                   %Set the button width, in centimeters.
ui_h = (py - 5*sp)/3;                                                       %Recalculate the uicontrol height.
if isfield(options,'feed_left_right') && options.feed_left_right == 1       %If there are two feeders...
    pos = [sp, 2*sp, (ui_w - sp)/2, ui_h];                                  %Set the button position.
    str = {'FEED','LEFT'};                                                  %Set the button text.
else                                                                        %Otherwise, if there's just one feeder...
    pos = [sp, 2*sp, ui_w, ui_h];                                           %Set the button position.
    str = 'FEED';                                                           %Set the button text.
end
handles.ui.btn_feed = uibutton(fig,'text',str,...
    'position',scale*pos,...
    'fontname','Arial',...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'fontcolor','k',...
    'enable','off');                                                        %Create a button for (left) manual feeds.
if isfield(options,'feed_left_right') && options.feed_left_right == 1       %If there are two feeders...
    pos(1) = pos(1) + (ui_w - sp)/2 + sp;                                   %Update the position left edge.
    str = {'FEED','RIGHT'};                                                 %Set the button text.
    handles.ui.btn_feed(2) = uibutton(fig,'text',str,...
        'position',scale*pos,...
        'fontname','Arial',...
        'fontweight','bold',...
        'fontsize',fontsize,...
        'fontcolor','k',...
        'enable','off');                                                    %Create a button for manual feeds.
end
pos(1) = sp;                                                                %Update the position left edge.
pos(3) = ui_w;                                                              %Set the start and pause buttons to maximum width.
pos(2) = pos(2) + pos(4) + sp;                                              %Adjust the position bottom edge.    
handles.ui.btn_pause = uibutton(fig,'text','PAUSE',...
    'position',scale*pos,...
    'fontname','Arial',...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'fontcolor',[0 0 0.5],...
    'enable','off');                                                        %Create a pause button.
pos(2) = pos(2) + pos(4) + sp;                                              %Adjust the position bottom edge.    
handles.ui.btn_start = uibutton(fig,'text','START',...
    'position',scale*pos,...
    'fontname','Arial',...
    'fontweight','bold',...
    'fontsize',fontsize,...
    'fontcolor',[0 0.5 0],...
    'enable','off');                                                        %Create a pause button.


%% Create a table to show users trial data.
pos(1) = pos(1) + pos(3) + sp;                                              %Set the left-hand edge of the trial table.
pos(2) = 2*sp;                                                              %Set the bottom edge of the trial table.
pos(3) = w - pos(1) - 2*sp;                                                 %Set the width of the trial table.
pos(4) = py - 2*sp - 1.75;                                                  %Set the height of the trial table.
handles.ui.tbl_trial = uitable(fig,'position',scale*pos,...
    'fontname','Arial',...
    'fontsize',0.75*fontsize,...
    'enable','off');                                                        %Create a table to hold trial info.
columns =   {   'Trial',...
                'Time',...
                'Outcome'};                                                 %List the column labels.
handles.ui.tbl_trial.ColumnName = columns;                                  %Label the columns of the table.
col_w = {1, 1, 1};                                                          %Create a matrix to hold column widths.
N = sum(vertcat(col_w{:}));                                                 %Find the total of all the column widths.
for i = 1:numel(columns)                                                    %Step through each column label.
    col_w{i} = scale*pos(3)*col_w{i}/N;                                     %Scale each column width to the character size.
end
col_w{end} = 'auto';                                                        %Set the last column to auto-scale.
handles.ui.tbl_trial.ColumnWidth = col_w;                                   %Set the column widths.            
handles.ui.table_style = [];                                                %Create a field to hold table styles.
handles.ui.table_style.outcomes = 'HMFCANLP';                               %Create a subfield to hold table style labels.
handles.ui.table_style.h(1) = uistyle('BackgroundColor',[0.5 1 0.6]);       %Create a light green cell color for hits.
handles.ui.table_style.h(2) = uistyle('BackgroundColor',[1 0.6 0.5]);       %Create a light red cell color for misses.
handles.ui.table_style.h(3) = uistyle('BackgroundColor',[1 0.5 0.6]);       %Create a light red cell color for false alarms.
handles.ui.table_style.h(4) = uistyle('BackgroundColor',[0.6 1 0.5]);       %Create a light green cell color for correct rejections.
handles.ui.table_style.h(5) = uistyle('BackgroundColor',[0.8 0.8 0.8]);     %Create a light gray cell color for aborts.
handles.ui.table_style.h(6) = uistyle('BackgroundColor',[0.95 1 0.5]);      %Create a light yellow cell color for non-responses.
handles.ui.table_style.h(7) = uistyle('BackgroundColor',[1 0.95 0.5]);      %Create a light yellow cell color for loiters.
handles.ui.table_style.h(8) = uistyle('BackgroundColor',[0.95 0.95 0.5]);   %Create a light yellow cell color for pre-empts.
s = uistyle('HorizontalAlignment','center');                                %Create a centered horicontal alignment style.
addStyle(handles.ui.tbl_trial,s);                                           %Add the centered style to the table.


%% Create a text area to show users status messages.
pos(2) = pos(2) + pos(4) + sp;                                              %Set the bottom edge of the messagebox.
pos(4) = py - pos(2) - sp;                                                  %Set the height of the the messagebox.
handles.ui.msgbox = uitextarea(fig,...
    'value','Initializing...',...
    'position',scale*pos,...
    'fontname','Arial',...
    'fontweight','bold',...
    'fontsize',0.8*fontsize,...
    'editable','off');                                                      %Create a messagebox.

%% Update the handles structure.
handles.ui = orderfields(handles.ui);                                       %Order the UI fields alphabetically.
handles.mainfig = fig;                                                      %Save the figure handle in the handles structure.
fig.UserData = handles;                                                     %Save the handles structure to the figure's UserData property.


% %% Set the units for all children of the main figure to "normalized".
% objs = get(fig,'children');                                     %Grab the handles for all children of the main figure.
% checker = ones(1,numel(objs));                                              %Create a checker variable to control the following loop.
% while any(checker == 1)                                                     %Loop until no new children are found.
%     for i = 1:numel(objs)                                                   %Step through each object.
%         if isempty(get(objs(i),'children'))                                 %If the object doesn't have any children.
%             checker(i) = 0;                                                 %Set the checker variable entry for this object to 0.
%         end
%     end
%     if any(checker == 1)                                                    %If any objects were found to have children...        
%         temp = get(objs(checker == 1),'children');                          %Grab the handles of the newly-identified children.
%         checker(:) = 0;                                                     %Skip all already-registed objects on the next loop.
%         temp = vertcat(temp{:});                                            %Vertically concatenate all of the object handles.
%         j = strcmpi(get(temp,'type'),'uimenu');                             %Check if any of the children are uimenu objects.
%         temp(j) = [];                                                       %Kick out all uimenu objects.        
%         if ~isempty(temp)                                                   %If there's any new objects...
%             for i = 1:numel(temp)                                           %Step through each new object.
%                 objs(end+1) = temp(i);                                      %Add each new child to the object list.
%                 checker(end+1) = 1;                                         %Add a new entry to the checker matrix.
%             end
%         end
%     end
% end
% type = get(objs,'type');                                                    %Grab the type of each object.
% objs(strcmpi(type,'uimenu')) = [];                                          %Kick out all uimenu items.
% set(objs,'units','normalized');                                             %Set all units to normalized.
