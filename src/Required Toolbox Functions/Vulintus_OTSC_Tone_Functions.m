function ctrl = Vulintus_OTSC_Tone_Functions(ctrl, otsc_codes, varargin)

%Vulintus_OTSC_Tone_Functions.m - Vulintus, Inc., 2023
%
%   VULINTUS_OTSC_TONE_FUNCTIONS defines and adds OmniTrak Serial
%   Communication (OTSC) functions to the control structure for Vulintus
%   OmniTrak devices which have tone-playing capabilities.
% 
%   NOTE: These functions are designed to be used with the "serialport" 
%   object introduced in MATLAB R2019b and will not work with the older 
%   "serial" object communication.
%
%   UPDATE LOG:
%   2023-09-28 - Drew Sloan - Function first created, split off from
%                             "Vulintus_OTSC_Common_Functions.m".
%   2023-12-07 - Drew Sloan - Updated calls to "Vulintus_Serial_Request" to
%                             allow multi-type responses.
%   2024-01-31 - Drew Sloan - Added optional input arguments for
%                             passthrough commands.
%   2024-02-22 - Drew Sloan - Organized functions by scope into subfields.
%   2024-06-07 - Drew Sloan - Added a optional "devices" input argument to
%                             selectively add the functions to the control 
%                             structure.
%


%List the Vulintus devices that use these functions.
device_list = { 'MT-PP',...
                'OT-3P',...
                'OT-CC',...
                'OT-NP',...
                'OT-PR',...
                'OT-LR',...
                'ST-AP'};

%If an cell arracy of connected devices was provided, match against the device lis.
if nargin > 2
    connected_devices = varargin{1};                                        %Grab the list of connected devices.
    [~,i,~] = intersect(connected_devices,device_list);                     %Look for any matches between the two device lists.
    if ~any(i)                                                              %If no match was found...
        if isfield(ctrl,'tone')                                             %If there's a "tone" field in the control structure...
            ctrl = rmfield(ctrl,'tone');                                    %Remove it.
        end
        return                                                              %Skip execution of the rest of the function.
    end
end

serialcon = ctrl.serialcon;                                                 %Grab the handle for the serial connection.

%Tone functions.
ctrl.tone = [];                                                             %Create a subfield to hold tone functions.

%Play the specified tone.
ctrl.tone.on = ...
    @(i,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.PLAY_TONE,...
    'data',{i,'uint8'},...
    varargin{:});                            

%Stop any currently-playing tone.
ctrl.tone.off = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.STOP_TONE,...
    varargin{:});                                      

%Request/set the current tone index.
ctrl.tone.index.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.REQ_TONE_INDEX,...
    'reply',{1,'uint8'},...
    varargin{:});     
ctrl.tone.index.set = ...
    @(i,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.TONE_INDEX,...
    'data',{i,'uint8'},...
    varargin{:});

%Request/set the current tone frequency.
ctrl.tone.freq.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.REQ_TONE_FREQ,...
    'reply',{1,'uint16'},...
    varargin{:});       
ctrl.tone.freq.set = ...
    @(i,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.TONE_FREQ,...
    'data',{i,'uint16'},...
    varargin{:});

%Request/set the current tone duration.
ctrl.tone.dur.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.REQ_TONE_DUR,...
    'reply',{1,'uint16'},...
    varargin{:});         
ctrl.tone.dur.set = ...
    @(i,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.TONE_DUR,...
    'data',{i,'uint16'},...
    varargin{:});

%Request/set the tone volume, normalized from 0 to 1.
ctrl.tone.volume.get =  ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.REQ_TONE_VOLUME,...
    'reply',{1,'single'},...
    varargin{:});  
ctrl.tone.volume.set = ...
    @(volume,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.TONE_VOLUME,...
    'data',{volume,'single'},...
    varargin{:});