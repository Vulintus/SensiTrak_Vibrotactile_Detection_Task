function ctrl = Vulintus_OTSC_Common_Functions(ctrl, otsc_codes)

%Vulintus_OTSC_Common_Functions.m - Vulintus, Inc., 2022
%
%   VULINTUS_OTSC_COMMON_FUNCTIONS defines and adds OmniTrak Serial
%   Communication (OTSC) functions to a function structure for control of 
%   Vulintus OmniTrak devices over the serial line.
%   
%   NOTE: These functions are designed to be used with the "serialport" 
%   object introduced in MATLAB R2019b and will not work with the older 
%   "serial" object communication.
%
%   UPDATE LOG:
%   2022-02-25 - Drew Sloan - Function first created, adapted from
%                             MotoTrak_Controller_V2pX_Serial_Functions.m.
%   2022-05-24 - Drew Sloan - Added a 'verbose' output option to the
%                             "read_stream" function.
%   2023-09-27 - Drew Sloan - Merged the OTSC protocol into the OmniTrak
%                             Serial Communication (OTSC) protocol and
%                             changed this function name from 
%                             "OTSC_Common_Serial_Functions" to
%                             "Vulintus_OTSC_Common_Functions".
%   2023-12-07 - Drew Sloan - Updated calls to "Vulintus_Serial_Request" to
%                             allow multi-type responses.
%   2024-02-22 - Drew Sloan - Organized functions by scope into subfields.
%

serialcon = ctrl.serialcon;                                                 %Grab the handle for the serial connection.
vulintus_serial = Vulintus_Serial_Basic_Functions(serialcon);               %Load the basic serial functions for either "serialport" or "serial".


%Serial line management functions.
ctrl.otsc = [];                                                             %Create a field to hold OTSC functions.

%Clear the serial line.
ctrl.otsc.clear = vulintus_serial.flush;    

%Close and delete the serial connection.
ctrl.otsc.close = ...
    @()Vulintus_Serial_Close(serialcon,otsc_codes.STREAM_ENABLE);           

%Verify OTSC communication.
ctrl.otsc.verify = ...
    @(varargin)Vulintus_Serial_Comm_Verification(serialcon,...
    otsc_codes.REQ_COMM_VERIFY,...
    otsc_codes.COMM_VERIFY,...
    varargin{:});         


%Device information functions.
ctrl.device = [];                                                           %Create a field to hold device info.

%Request the device ID number.
ctrl.device.id = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.REQ_DEVICE_ID,...
    'reply',{1,'uint16'},...
    varargin{:});                

%Request the firmware filename, upload date, or upload time.
ctrl.device.firmware.filename = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.REQ_FW_FILENAME,...
    'reply',{NaN,'char'}, ...
    varargin{:});                
ctrl.device.firmware.date = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.REQ_FW_DATE,...
    'reply',{NaN,'char'},...
    varargin{:});                          
ctrl.device.firmware.time = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.REQ_FW_TIME,...
    'reply',{NaN,'char'},...
    varargin{:});

%Request the device microcontroller unique ID number.
ctrl.device.mcu_serialnum = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.REQ_MCU_SERIALNUM,...
    'reply',{NaN,'uint8'},...
    varargin{:});                    

%Request/set the user-set device alias.
ctrl.device.alias.userset.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.REQ_USERSET_ALIAS,...
    'reply',{NaN,'char'},...
    varargin{:});    
ctrl.device.alias.userset.set = ...
    @(alias,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.USERSET_ALIAS,...
    'data',{length(alias),'uint8'; alias,'char'},...
    varargin{:}); 
                 
%Request/set the Vulintus alias (adjective/noun serial number) for the device.
ctrl.device.alias.vulintus.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.REQ_VULINTUS_ALIAS,...
    'reply',{NaN,'char'},...
    varargin{:});          
ctrl.device.alias.vulintus.set = ...
    @(alias,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.VULINTUS_ALIAS,...
    'data',{length(alias),'uint8'; alias,'char'},...
    varargin{:});
          

%Streaming control functions.
ctrl.stream = [];                                                           %Create a field to hold streaming functions.

%Enable/disable streaming from the device.
ctrl.stream.enable = ...
    @(enable,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.STREAM_ENABLE,...
    'data',{enable,'uint8'},...
    varargin{:});                            

%Request/set the current streaming period, in microseconds.
ctrl.stream.period.set = ...
    @(period,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.STREAM_PERIOD,...
    'data',{period,'uint32'},...
    varargin{:});
ctrl.stream.period.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_STREAM_PERIOD,...
    'reply',{1,'uint32'},...
    varargin{:});              

%Read in any streaming data.
ctrl.stream.read = @(varargin)Vulintus_Serial_Read_Stream(serialcon,...
    otsc_codes,varargin{:});                                                