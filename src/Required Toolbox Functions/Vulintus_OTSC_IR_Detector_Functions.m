function ctrl = Vulintus_OTSC_IR_Detector_Functions(ctrl, otsc_codes, varargin)

%Vulintus_OTSC_IR_Detector_Functions.m - Vulintus, Inc., 2023
%
%   VULINTUS_OTSC_IR_Detector_FUNCTIONS defines and adds OmniTrak Serial
%   Communication (OTSC) functions to the control structure for Vulintus
%   OmniTrak devices which have IR detector sensors.
% 
%   NOTE: These functions are designed to be used with the "serialport" 
%   object introduced in MATLAB R2019b and will not work with the older 
%   "serial" object communication.
%
%   UPDATE LOG:
%   2023-10-02 - Drew Sloan - Function first created, split off from
%                             "Vulintus_OTSC_Common_Functions.m".
%   2023-12-07 - Drew Sloan - Updated calls to "Vulintus_Serial_Request" to
%                             allow multi-type responses.
%   2024-01-31 - Drew Sloan - Added optional input arguments for
%                             passthrough commands.
%   2024-02-22 - Drew Sloan - Organized functions by scope into subfields.
%   2024-06-07 - Drew Sloan - Added a optional "devices" input argument to
%                             selectively add the functions to the control 
%                             structure.
%                           - Renamed script from
%                             "Vulintus_OTSC_Nosepoke_Functions" to 
%                             "Vulintus_OTSC_IR_Detector_Functions".
%


%List the Vulintus devices that use these functions.
device_list = { 'MT-PP',...
                'OT-3P',...
                'OT-NP',...
                'OT-PR',...
                'OT-LR'};

%If an cell arracy of connected devices was provided, match against the device lis.
if nargin > 2
    connected_devices = varargin{1};                                        %Grab the list of connected devices.
    [~,i,~] = intersect(connected_devices,device_list);                     %Look for any matches between the two device lists.
    if ~any(i)                                                              %If no match was found...
        if isfield(ctrl,'irdet')                                            %If there's a "ir" field in the control structure...
            ctrl = rmfield(ctrl,'irdet');                                   %Remove it.
        end
        return                                                              %Skip execution of the rest of the function.
    end
end

serialcon = ctrl.serialcon;                                                 %Grab the handle for the serial connection.

%IR detecto status functions.
ctrl.irdet = [];                                                            %Create a field to hold IR detector functions.

%Request the current IR detector status bitmask.
ctrl.irdet.bits = @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_POKE_BITMASK,...
    'reply',{1,'uint32'; 1,'uint8'},...
    varargin{:});                                               

%Request the current IR detector analog reading.
ctrl.irdet.adc = ...
   @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_POKE_ADC,...
   'reply',{1, 'uint32'; 1,'uint16'},...
   'timestamp',...
   varargin{:});        

%Request the minimum and maximum ADC values of the IR detector sensor history, in ADC ticks.
ctrl.irdet.minmax = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_POKE_MINMAX,...
    'reply',{2,'uint16'},...
    varargin{:});                                                           

%Request/set the current IR detector threshold setting, normalized from 0 to 1.
ctrl.irdet.thresh_fl.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_POKE_THRESH_FL,...
    'reply',{1,'single'},...
    varargin{:});                                                           
ctrl.irdet.thresh_fl.set = ...
    @(thresh,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.POKE_THRESH_FL,...
    'data',{thresh,'single'},...
    varargin{:});

%Request/set the current IR detector auto-threshold setting, in ADC ticks.
ctrl.irdet.thresh_adc.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_POKE_THRESH_ADC,...
    'reply',{1,'uint16'},...
    varargin{:});                                                           
ctrl.irdet.thresh_adc.set = ...
    @(thresh,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.POKE_THRESH_ADC,...
    'data',{thresh,'uint16'},...
    varargin{:});

%Request/set the current IR detector auto-thresholding setting (0 = fixed, 1 = autoset).
ctrl.irdet.auto_thresh.get = ...
    @(varargin)Vulintus_OTSC_Transaction(serialcon,...
	otsc_codes.REQ_POKE_THRESH_AUTO,...
    'reply',{1,'uint8'},...
    varargin{:});                                                           
ctrl.irdet.auto_thresh.set = ...
    @(i,varargin)Vulintus_OTSC_Transaction(serialcon,...
    otsc_codes.POKE_THRESH_AUTO,...
    'data',{i,'uint8'},...
    varargin{:});

