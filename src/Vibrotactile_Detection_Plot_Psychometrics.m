function Vibrotactile_Detection_Plot_Psychometrics(behavior, trial)

%
%Vibrotactile_Detection_Task_Plot_Psychometrics.m - Vulintus, Inc.
%
%   VIBRATION_TASK_PLOT_PSYCHOMETRICS plots the current and historical
%   task performance on the performance plot axes.
%   
%   UPDATE LOG:
%   01/24/2020 - Drew Sloan - Function first implemented.
%

cla(behavior.ui.ax.data);                                                      %Create the psychophysical plot axes.
hold(behavior.ui.ax.data, 'on');                                               %Hold the axes for multiple plots.

set(behavior.ui.ax.data,'xlim',[-0.15,1.5],'ylim',[-0.15,1.1]);                  %Set the x- and y-axis limits.
line([0,0,1],[1,0,0],...
    'linestyle','-',...
    'linewidth',2,...
    'color','k',...
    'parent',behavior.ui.ax.data);                                             %Plot a line showing axes for the psychometric plot.
for i = 0:0.2:1                                                             %Step through y-axis labels.
    line([0,-0.01],i*[1,1],...
        'linestyle','-',...
        'linewidth',1,...
        'color','k',...
        'parent',behavior.ui.ax.data);                                         %Plot a line showing the y-axis tick marks.
    line([0,1],i*[1,1],...
        'linestyle','--',...
        'linewidth',1,...
        'color',[0.5 0.5 0.5],...
        'parent',behavior.ui.ax.data);                                         %Plot a line at the x-coordinate.
    text(-0.02,i,sprintf('%1.0f%%',100*i),...
        'horizontalalignment','right',...
        'verticalalignment','middle',...
        'fontweight','bold',...
        'fontsize',10,...
        'parent',behavior.ui.ax.data);                                         %Label the plot.
end
line([1.1, 1.1],[0, 1],...
    'linestyle','-',...
    'linewidth',2,...
    'color','k',...
    'parent',behavior.ui.ax.data);                                             %Plot a line showing axes for the time held.
text(1.1,1.01,'Time Held (s)',...
        'horizontalalignment','left',...
        'verticalalignment','bottom',...
        'fontweight','bold',...
        'fontsize',10,...
        'parent',behavior.ui.ax.data);                                         %Label the plot.

rates = unique(behavior.session.params.counts(1,:));                                        %Grab all of the vibration rates.
gaps = unique(behavior.session.params.counts(2,:));                                         %Grab all of the gap lengths
if numel(gaps) > 1                                                          %If there's multiple gaps.
    all_gaps = ...
        unique(vertcat(behavior.session.params.counts(2,:)',behavior.session.params.actual_gap_length));    %Find all gap values.
    x_range = all_gaps(end) - all_gaps(1);                                  %Grab the range of gap lengths.
    for x = gaps                                                            %Step through the listed gaps.
        line([1,1]*(0.05 + 0.90*(x - all_gaps(1))/x_range),[0,-0.02],...
            'linestyle','-',...
            'linewidth',1,...
            'color','k',...
            'parent',behavior.ui.ax.data);                                     %Plot a line showing the y-axis tick marks.
        str = sprintf('%1.0f',x);                                           %Make a string with the milliseconds value.
        text(0.05 + 0.95*(x - all_gaps(1))/x_range,-0.03,str,...
            'horizontalalignment','center',...
            'verticalalignment','top',...
            'fontweight','bold',...
            'fontsize',10,...
            'parent',behavior.ui.ax.data);                                     %Label the plot.
    end
    text(1,-0.03,'ms',...
        'horizontalalignment','right',...
        'verticalalignment','top',...
        'fontweight','bold',...
        'fontsize',10,...
        'parent',behavior.ui.ax.data);                                         %Label the plot.
    plot_type = 1;                                                          %Set the plot type to 1.    
elseif numel(rates) > 1                                                     %If there's multiple rates but only one gap.
	all_rates = ...
        unique(vertcat(behavior.session.params.counts(1,:)',behavior.session.params.actual_vib_rate));      %Find all rate values.
    x_range = all_rates(end) - all_rates(1);                                %Grab the range of vibration rates.
    for x = rates                                                           %Step through the listed rates.
        line([1,1]*(0.05 + 0.90*(x - all_rates(1))/x_range),[0,-0.02],...
            'linestyle','-',...
            'linewidth',1,...
            'color','k',...
            'parent',behavior.ui.ax.data);                                     %Plot a line showing the y-axis tick marks.
        str = sprintf('%1.0f',x);                                           %Make a string with the milliseconds value.
        text(0.05 + 0.95*(x - all_rates(1))/x_range,-0.03,str,...
            'horizontalalignment','center',...
            'verticalalignment','top',...
            'fontweight','bold',...
            'fontsize',10,...
            'parent',behavior.ui.ax.data);                                     %Label the plot.
    end
    text(1,-0.03,'Hz',...
        'horizontalalignment','right',...
        'verticalalignment','top',...
        'fontweight','bold',...
        'fontsize',10,...
        'parent',behavior.ui.ax.data);                                         %Label the plot.
    plot_type = 2;                                                          %Set the plot_type to 2.    
else                                                                        %Otherwise, if there's only one parameter.
    line([0.5,0.5],[0,-0.02],...
        'linestyle','-',...
        'linewidth',1,...
        'color','k',...
        'parent',behavior.ui.ax.data);                                         %Plot a line showing the y-axis tick marks.
    str = sprintf('%1.0f Hz, %1.0f ms',rates, gaps);                        %Make a string with the rate and gap values.
    text(0.5,-0.03,str,...
        'horizontalalignment','center',...
        'verticalalignment','top',...
        'fontweight','bold',...
        'fontsize',10,...
        'parent',behavior.ui.ax.data);                                         %Label the plot.
    plot_type = 3;                                                          %Set the plot_type to 3.
end

scale = max([sum(behavior.session.params.counts(3:4,:),1), sum(behavior.session.params.counts(5:6,:),1)]);  %Find the parameters with the most trials.
r_colors = jet(numel(rates));                                               %Make unique colors for each vibration rate.
r_colors = 0.75*r_colors + 0.25;                                            %Lighten up all of the colors.
m_size = 0.04;                                                              %Set the marker size.
if scale > 0                                                                %If there are any completed trials...
    for r = rates                                                           %Step through the vibration rates.
        for g = gaps                                                        %Step through the gaps.
            ln = [];                                                        %Create a variable to hold the line handle.
            c = behavior.session.params.counts(1,:) == r & behavior.session.params.counts(2,:) == g;        %Find the matching column in the trial counts.
            N = sum(behavior.session.params.counts(3:4,c),1);                               %Grab the total number of non-catch trials.
            if N > 0                                                        %If there's any completed trials to plot.
                y = behavior.session.params.counts(3,c)/N;                                  %Grab the hit rate.
                if plot_type == 3                                           %If this is the only parameter set...
                    fill([0.2 0.5 0.5 0.2],[0, 0, y, y],[0.5 1 0.5],...
                        'edgecolor','k',...
                        'linewidth',2,...
                        'parent',behavior.ui.ax.data);                         %Create a filled rectangle for the hit rate.
                    text(0.35,y+0.01,'H',...
                        'horizontalalignment','center',...
                        'verticalalignment','bottom',...
                        'fontweight','bold',...
                        'fontsize',10,...
                        'parent',behavior.ui.ax.data);                         %Label the bar.
                else                                                        %Otherwise, if there's multiple parameters.
                    i = find(behavior.session.params.vib_rate == r & ...
                        behavior.session.params.gap_length == g,1,'first');                 %Find the first index for this vibration rate and gap length.
                    if plot_type == 1                                       %If we're plotting multiple gaps.
                        x = behavior.session.params.actual_gap_length(i);                   %Grab the actual gap length for this combination.
                        x = (0.05 + 0.90*(x - all_gaps(1))/x_range);        %Set the x-coordinate.
                    else                                                    %Otherwise, if we're plotting multiple vibration rates.
                        x = behavior.session.params.actual_vib_rate(i);                     %Grab the actual vibration for this combination.
                        x = (0.05 + 0.90*(x - all_rates(1))/x_range);       %Set the x-coordinate.
                    end
                    ln = line(x*[1,1],[0,1],...
                        'linestyle','--',...
                        'linewidth',1,...
                        'color',[0.5 0.5 0.5],...
                        'parent',behavior.ui.ax.data);                         %Plot a line at the x-coordinate.
                    uistack(ln,'bottom');                                   %Send the line to the bottom.
                    fill(x + (m_size*(N/scale) + m_size)*[-0.5 0.5 0],...
                        y + (m_size*(N/scale) + m_size)*[-0.5 -0.5 0.5],...
                        r_colors(r == rates,:),...
                        'edgecolor','k',...
                        'linewidth',1,...
                        'parent',behavior.ui.ax.data);                         %Create a filled rectangle for the hit rate.
                end                
            end
            N = sum(behavior.session.params.counts(5:6,c),1);                               %Grab the total number of catch trials.            
            if N > 0                                                        %If there's any completed trials to plot.
                y = behavior.session.params.counts(5,c)/N;                                  %Grab the hit rate.
                if plot_type == 3                                           %If this is the only parameter set...
                    fill([0.5 0.8 0.8 0.5],[0, 0, y, y],[1 0.4 0.4],...
                        'edgecolor','k',...
                        'linewidth',2,...
                        'parent',behavior.ui.ax.data);                         %Create a filled rectangle for the hit rate.
                    text(0.65,y+0.01,'F',...
                        'horizontalalignment','center',...
                        'verticalalignment','bottom',...
                        'fontweight','bold',...
                        'fontsize',10,...
                        'parent',behavior.ui.ax.data);                         %Label the bar.
                else                                                        %Otherwise, if there's multiple parameters.
                    i = find(behavior.session.params.vib_rate == r & ...
                        behavior.session.params.gap_length == g,1,'first');                 %Find the first index for this vibration rate and gap length.
                    if plot_type == 1                                       %If we're plotting multiple gaps.
                        x = behavior.session.params.actual_gap_length(i);                   %Grab the actual gap length for this combination.
                        x = (0.05 + 0.90*(x - all_gaps(1))/x_range);        %Set the x-coordinate.
                    else                                                    %Otherwise, if we're plotting multiple vibration rates.
                        x = behavior.session.params.actual_vib_rate(i);                     %Grab the actual vibration for this combination.
                        x = (0.05 + 0.90*(x - all_rates(1))/x_range);       %Set the x-coordinate.
                    end
                    if isempty(ln)                                          %If a tick line doesn't exist yet...
                        ln = line(x*[1,1],[0,1],...
                            'linestyle','--',...
                            'linewidth',1,...
                            'color',[0.5 0.5 0.5],...
                            'parent',behavior.ui.ax.data);                     %Plot a line at the x-coordinate.
                        uistack(ln,'bottom');                               %Send the line to the bottom.
                    end
                    fill(x + (m_size*(N/scale) + m_size)*[-0.4 0.4 0],...
                        y + (m_size*(N/scale) + m_size)*[0.5 0.5 -0.5],...
                        r_colors(r == rates,:),...
                        'edgecolor','k',...
                        'linewidth',1,...
                        'parent',behavior.ui.ax.data);                         %Create a filled rectangle for the hit rate.
                end                
            end
        end
    end
end

max_t = ceil(max(behavior.session.params.time_held));                                       %Find the maximum hold time and round up to the nearest second.
[N, ~] = histcounts(behavior.session.params.time_held,0:max_t/20:max_t);                    %Create a histogram of hold times.
max_N = max(N);                                                             %Find the maximum count.
for i = 1:20                                                                %Step through bins.
    x = 1.1 + 0.35*(N(i)/max_N)*[0 1 1 0];                                  %Set the x-coordinates.
    y = 0.05*(i-1) + 0.05*[0 0 1 1];                                        %Set the y-coordinates.
    fill(x, y, [0.75 1 0.75],...
        'edgecolor','k',...
        'linewidth',1,...
        'parent',behavior.ui.ax.data);                                         %Create a filled rectangle for histogram count.
end
if max_t < 1                                                                %If the max hold time is less than 1 seconds...
    t_ticks = 0:0.2:max_t;                                                  %Set tick marks every 0.2 seconds.
elseif max_t < 2                                                            %If the max hold time is less than 2 seconds...
    t_ticks = 0:0.5:max_t;                                                  %Set tick marks every 0.5 seconds.
elseif max_t < 5                                                            %If the max hold time is less than 5 seconds...
    t_ticks = 0:1:max_t;                                                    %Set tick marks every 1 second.
elseif max_t < 10                                                           %If the max hold time is less than 10 seconds...
    t_ticks = 0:2:max_t;                                                    %Set tick marks every 2 seconds.
else                                                                        %Otherwise...
    t_ticks = 0:5:max_t;                                                    %Set tick marks every 5 seconds.
end    
for t = t_ticks                                                             %Step through the hold time ticks.                                                                                                        
	line(1.1+[0,-0.01],(t/max_t)*[1,1],...
        'linestyle','-',...
        'linewidth',1,...
        'color','k',...
        'parent',behavior.ui.ax.data);                                         %Plot a line showing the y-axis tick marks.
    if rem(t,1) == 0                                                        %If the value is a whole number...
        str = sprintf('%1.0f',t);                                           %Grab the string with no decimals.
    else                                                                    %Otherwise...
        str = sprintf('%1.0f',t);                                           %Grab the string with one decimal.
    end
    text(1.1-0.02,(t/max_t),str,...
        'horizontalalignment','right',...
        'verticalalignment','middle',...
        'fontweight','bold',...
        'fontsize',10,...
        'parent',behavior.ui.ax.data);                                         %Label the plot.
end